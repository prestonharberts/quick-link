/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => QuickLink
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var QuickLink = class extends import_obsidian.Plugin {
  async onload() {
    console.log("loading Quick Link plugin");
    this.addCommand({
      id: "quick-link",
      name: "Quick Link",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        this.openPrompt(editor);
      }
    });
  }
  openPrompt(editor) {
    const modal = new LinkModal(this.app, editor);
    modal.open();
  }
};
var LinkModal = class extends import_obsidian.Modal {
  constructor(app, editor) {
    super(app);
    this.editor = editor;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h5", { text: "Enter alias" });
    contentEl.style.marginTop = "-16px";
    const inputEl = contentEl.createEl("input");
    inputEl.type = "text";
    inputEl.placeholder = "Example: Alias \u2192 [[alias|Alias]]";
    inputEl.style.textAlign = "center";
    inputEl.style.width = "100%";
    inputEl.style.margin = "auto";
    inputEl.addEventListener("keydown", async (event) => {
      if (event.ctrlKey && event.key === "Enter") {
        event.preventDefault();
        const alias = inputEl.value;
        await this.insertLink(alias, "plural");
        this.close();
      } else if (!event.ctrlKey && event.key === "Enter") {
        event.preventDefault();
        const alias = inputEl.value;
        await this.insertLink(alias, "singular");
        this.close();
      }
    });
  }
  async insertLink(alias, ending) {
    console.log("inserting link");
    let filename = alias;
    filename = filename.toLowerCase();
    filename = filename.replace(/ /g, "-");
    filename = filename.replace(/'/g, "");
    filename = filename.replace(/:/g, "");
    let link = "";
    if (ending === "singular")
      link = `[[${filename}|${alias}]]`;
    else if (ending === "plural")
      link = `[[${filename}s|${alias}]]`;
    this.editor.replaceSelection(link);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBFZGl0b3IsIE1hcmtkb3duVmlldywgTW9kYWwsIE5vdGljZSwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nLCBlZGl0b3JFZGl0b3JGaWVsZCB9IGZyb20gJ29ic2lkaWFuJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUXVpY2tMaW5rIGV4dGVuZHMgUGx1Z2luIHtcblx0YXN5bmMgb25sb2FkKCkge1xuXHRcdGNvbnNvbGUubG9nKCdsb2FkaW5nIFF1aWNrIExpbmsgcGx1Z2luJylcblx0XHQvLyB0aGlzIGFkZHMgYW4gZWRpdG9yIGNvbW1hbmQgdGhhdCBjYW4gcGVyZm9ybSBzb21lIG9wZXJhdGlvbiBvbiB0aGUgY3VycmVudCBlZGl0b3IgaW5zdGFuY2Vcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0aWQ6ICdxdWljay1saW5rJyxcblx0XHRcdG5hbWU6ICdRdWljayBMaW5rJyxcblx0XHRcdGVkaXRvckNhbGxiYWNrOiAoZWRpdG9yOiBFZGl0b3IsIHZpZXc6IE1hcmtkb3duVmlldykgPT4ge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhlZGl0b3IuZ2V0U2VsZWN0aW9uKCkpO1xuXHRcdFx0XHR0aGlzLm9wZW5Qcm9tcHQoZWRpdG9yKVxuXHRcdFx0fVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cblx0b3BlblByb21wdChlZGl0b3I6IEVkaXRvcikge1xuXHRcdGNvbnN0IG1vZGFsID0gbmV3IExpbmtNb2RhbCh0aGlzLmFwcCwgZWRpdG9yKTtcblx0XHRtb2RhbC5vcGVuKCk7XG5cdH1cbn1cblxuY2xhc3MgTGlua01vZGFsIGV4dGVuZHMgTW9kYWwge1xuXHRlZGl0b3I6IEVkaXRvclxuXHRvblN1Ym1pdDogKHJlc3VsdDogc3RyaW5nKSA9PiB2b2lkO1xuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgZWRpdG9yOiBFZGl0b3IpIHtcblx0XHRzdXBlcihhcHApO1xuXHRcdHRoaXMuZWRpdG9yID0gZWRpdG9yXG5cdH1cblxuXHRvbk9wZW4oKSB7XG5cdFx0Y29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XG5cblx0XHRjb250ZW50RWwuY3JlYXRlRWwoJ2g1JywgeyB0ZXh0OiAnRW50ZXIgYWxpYXMnIH0pO1xuXHRcdGNvbnRlbnRFbC5zdHlsZS5tYXJnaW5Ub3AgPSAnLTE2cHgnO1xuXG5cdFx0Y29uc3QgaW5wdXRFbCA9IGNvbnRlbnRFbC5jcmVhdGVFbCgnaW5wdXQnKTtcblx0XHRpbnB1dEVsLnR5cGUgPSAndGV4dCc7XG5cdFx0aW5wdXRFbC5wbGFjZWhvbGRlciA9ICdFeGFtcGxlOiBBbGlhcyBcdTIxOTIgW1thbGlhc3xBbGlhc11dJztcblx0XHRpbnB1dEVsLnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xuXHRcdGlucHV0RWwuc3R5bGUud2lkdGggPSAnMTAwJSc7XG5cdFx0aW5wdXRFbC5zdHlsZS5tYXJnaW4gPSAnYXV0byc7XG5cblx0XHRpbnB1dEVsLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBhc3luYyAoZXZlbnQpID0+IHtcblx0XHRcdGlmIChldmVudC5jdHJsS2V5ICYmIGV2ZW50LmtleSA9PT0gJ0VudGVyJykge1xuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBQcmV2ZW50IHRoZSBkZWZhdWx0IGJlaGF2aW9yXG5cdFx0XHRcdGNvbnN0IGFsaWFzID0gaW5wdXRFbC52YWx1ZTtcblx0XHRcdFx0YXdhaXQgdGhpcy5pbnNlcnRMaW5rKGFsaWFzLCAncGx1cmFsJyk7XG5cdFx0XHRcdHRoaXMuY2xvc2UoKTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKCFldmVudC5jdHJsS2V5ICYmIGV2ZW50LmtleSA9PT0gJ0VudGVyJykge1xuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBQcmV2ZW50IHRoZSBkZWZhdWx0IGJlaGF2aW9yXG5cdFx0XHRcdGNvbnN0IGFsaWFzID0gaW5wdXRFbC52YWx1ZTtcblx0XHRcdFx0YXdhaXQgdGhpcy5pbnNlcnRMaW5rKGFsaWFzLCAnc2luZ3VsYXInKTtcblx0XHRcdFx0dGhpcy5jbG9zZSgpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdH1cblxuXHRhc3luYyBpbnNlcnRMaW5rKGFsaWFzOiBzdHJpbmcsIGVuZGluZzogc3RyaW5nKSB7XG5cdFx0Y29uc29sZS5sb2coJ2luc2VydGluZyBsaW5rJyk7XG4gIFx0XHRsZXQgZmlsZW5hbWU6IHN0cmluZyA9IGFsaWFzO1xuICBcdFx0ZmlsZW5hbWUgPSBmaWxlbmFtZS50b0xvd2VyQ2FzZSgpO1xuICBcdFx0ZmlsZW5hbWUgPSBmaWxlbmFtZS5yZXBsYWNlKC8gL2csICctJyk7XG4gIFx0XHRmaWxlbmFtZSA9IGZpbGVuYW1lLnJlcGxhY2UoLycvZywgJycpO1xuICBcdFx0ZmlsZW5hbWUgPSBmaWxlbmFtZS5yZXBsYWNlKC86L2csICcnKTtcblx0XHRsZXQgbGluayA9ICcnO1xuXHRcdGlmIChlbmRpbmcgPT09ICdzaW5ndWxhcicpXG5cdFx0XHRsaW5rID0gYFtbJHtmaWxlbmFtZX18JHthbGlhc31dXWA7XG5cdFx0ZWxzZSBpZiAoZW5kaW5nID09PSAncGx1cmFsJylcblx0XHRcdGxpbmsgPSBgW1ske2ZpbGVuYW1lfXN8JHthbGlhc31dXWA7XG5cblx0XHR0aGlzLmVkaXRvci5yZXBsYWNlU2VsZWN0aW9uKGxpbmspO1xuXHR9XG5cblx0b25DbG9zZSgpIHtcblx0XHRjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcblx0XHQvLyBsZXQgeyBjb250ZW50RWwgfSA9IHRoaXM7XG5cdFx0Y29udGVudEVsLmVtcHR5KCk7XG5cdH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBK0c7QUFFL0csSUFBcUIsWUFBckIsY0FBdUMsdUJBQU87QUFBQSxFQUM3QyxNQUFNLFNBQVM7QUFDZCxZQUFRLElBQUksMkJBQTJCO0FBRXZDLFNBQUssV0FBVztBQUFBLE1BQ2YsSUFBSTtBQUFBLE1BQ0osTUFBTTtBQUFBLE1BQ04sZ0JBQWdCLENBQUMsUUFBZ0IsU0FBdUI7QUFDdkQsZ0JBQVEsSUFBSSxPQUFPLGFBQWEsQ0FBQztBQUNqQyxhQUFLLFdBQVcsTUFBTTtBQUFBLE1BQ3ZCO0FBQUEsSUFDYSxDQUFDO0FBQUEsRUFDVDtBQUFBLEVBRVAsV0FBVyxRQUFnQjtBQUMxQixVQUFNLFFBQVEsSUFBSSxVQUFVLEtBQUssS0FBSyxNQUFNO0FBQzVDLFVBQU0sS0FBSztBQUFBLEVBQ1o7QUFDRDtBQUVBLElBQU0sWUFBTixjQUF3QixzQkFBTTtBQUFBLEVBRzdCLFlBQVksS0FBVSxRQUFnQjtBQUNyQyxVQUFNLEdBQUc7QUFDVCxTQUFLLFNBQVM7QUFBQSxFQUNmO0FBQUEsRUFFQSxTQUFTO0FBQ1IsVUFBTSxFQUFFLFVBQVUsSUFBSTtBQUV0QixjQUFVLFNBQVMsTUFBTSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ2hELGNBQVUsTUFBTSxZQUFZO0FBRTVCLFVBQU0sVUFBVSxVQUFVLFNBQVMsT0FBTztBQUMxQyxZQUFRLE9BQU87QUFDZixZQUFRLGNBQWM7QUFDdEIsWUFBUSxNQUFNLFlBQVk7QUFDMUIsWUFBUSxNQUFNLFFBQVE7QUFDdEIsWUFBUSxNQUFNLFNBQVM7QUFFdkIsWUFBUSxpQkFBaUIsV0FBVyxPQUFPLFVBQVU7QUFDcEQsVUFBSSxNQUFNLFdBQVcsTUFBTSxRQUFRLFNBQVM7QUFDM0MsY0FBTSxlQUFlO0FBQ3JCLGNBQU0sUUFBUSxRQUFRO0FBQ3RCLGNBQU0sS0FBSyxXQUFXLE9BQU8sUUFBUTtBQUNyQyxhQUFLLE1BQU07QUFBQSxNQUNaLFdBQ1MsQ0FBQyxNQUFNLFdBQVcsTUFBTSxRQUFRLFNBQVM7QUFDakQsY0FBTSxlQUFlO0FBQ3JCLGNBQU0sUUFBUSxRQUFRO0FBQ3RCLGNBQU0sS0FBSyxXQUFXLE9BQU8sVUFBVTtBQUN2QyxhQUFLLE1BQU07QUFBQSxNQUNaO0FBQUEsSUFDRCxDQUFDO0FBQUEsRUFFRjtBQUFBLEVBRUEsTUFBTSxXQUFXLE9BQWUsUUFBZ0I7QUFDL0MsWUFBUSxJQUFJLGdCQUFnQjtBQUMxQixRQUFJLFdBQW1CO0FBQ3ZCLGVBQVcsU0FBUyxZQUFZO0FBQ2hDLGVBQVcsU0FBUyxRQUFRLE1BQU0sR0FBRztBQUNyQyxlQUFXLFNBQVMsUUFBUSxNQUFNLEVBQUU7QUFDcEMsZUFBVyxTQUFTLFFBQVEsTUFBTSxFQUFFO0FBQ3RDLFFBQUksT0FBTztBQUNYLFFBQUksV0FBVztBQUNkLGFBQU8sS0FBSyxZQUFZO0FBQUEsYUFDaEIsV0FBVztBQUNuQixhQUFPLEtBQUssYUFBYTtBQUUxQixTQUFLLE9BQU8saUJBQWlCLElBQUk7QUFBQSxFQUNsQztBQUFBLEVBRUEsVUFBVTtBQUNULFVBQU0sRUFBRSxVQUFVLElBQUk7QUFFdEIsY0FBVSxNQUFNO0FBQUEsRUFDakI7QUFDRDsiLAogICJuYW1lcyI6IFtdCn0K
